/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package exercicio2;

import java.text.DecimalFormat;
import javax.swing.JOptionPane;

/**
 *
 * @author Aluno
 */
public class ExercicioRM04757 extends javax.swing.JFrame {
    DecimalFormat df = new DecimalFormat("###,##0.00");
    double watts=0, volts=0, amps=0, ohms=0;
    int escolha04757;
    int i = 0;
    String escolha;
    /**
     * Creates new form ExercicioRM04757
     */
    public ExercicioRM04757() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_enunciado = new javax.swing.JButton();
        btn_watts = new javax.swing.JButton();
        btn_volts = new javax.swing.JButton();
        btn_amps = new javax.swing.JButton();
        btn_ohms = new javax.swing.JButton();
        lbl_watts = new javax.swing.JLabel();
        txt_watts = new javax.swing.JTextField();
        lbl_volts = new javax.swing.JLabel();
        txt_volts = new javax.swing.JTextField();
        lbl_amps = new javax.swing.JLabel();
        txt_amps = new javax.swing.JTextField();
        lbl_ohms = new javax.swing.JLabel();
        txt_ohms = new javax.swing.JTextField();
        btn_sair = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_enunciado.setText("ENUNCIADO");
        btn_enunciado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_enunciadoActionPerformed(evt);
            }
        });

        btn_watts.setText("Watts");
        btn_watts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_wattsActionPerformed(evt);
            }
        });

        btn_volts.setText("Volts");
        btn_volts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_voltsActionPerformed(evt);
            }
        });

        btn_amps.setText("Amps");
        btn_amps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ampsActionPerformed(evt);
            }
        });

        btn_ohms.setText("Ohms");
        btn_ohms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ohmsActionPerformed(evt);
            }
        });

        lbl_watts.setText("Watts");

        txt_watts.setEnabled(false);

        lbl_volts.setText("Volts");

        txt_volts.setEnabled(false);

        lbl_amps.setText("Amps");

        txt_amps.setEnabled(false);

        lbl_ohms.setText("Ohms");

        txt_ohms.setEnabled(false);

        btn_sair.setText("SAIR");
        btn_sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sairActionPerformed(evt);
            }
        });

        jLabel1.setText("Escolha uma opção para encontrar o seu valor:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_watts)
                            .addComponent(lbl_volts)
                            .addComponent(lbl_amps)
                            .addComponent(lbl_ohms))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_volts)
                            .addComponent(txt_amps)
                            .addComponent(txt_ohms)
                            .addComponent(txt_watts, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_sair, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btn_enunciado, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_watts)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_volts)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_amps)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_ohms)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_watts)
                    .addComponent(btn_volts)
                    .addComponent(btn_amps)
                    .addComponent(btn_ohms))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_sair)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_enunciado)
                        .addGap(27, 27, 27))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_watts)
                            .addComponent(txt_watts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_volts)
                            .addComponent(txt_volts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_amps)
                            .addComponent(txt_amps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_ohms)
                            .addComponent(txt_ohms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_enunciadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_enunciadoActionPerformed
        JOptionPane.showMessageDialog(null, "Crie uma aplicação que demonstre os cálculos utilizados na lei de Ohm. O usuário fornecerá 2 valores quaisquer das grandezas elétricas \n (voltagem, amperagem, potência ou resistência) e a aplicação irá complementar as demais grandezas restantes.");
    }//GEN-LAST:event_btn_enunciadoActionPerformed

    private void btn_wattsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_wattsActionPerformed
        do{
        escolha = (JOptionPane.showInputDialog("Escolha a maneira de encontrar o Watts digitando o número correspondente:"
                + "\n 1. Volts & Amps"
                + "\n 2. Amps & Ohms"
                + "\n 3. Ohms & Volts"
                + "\n n. SAIR"
                + "\n 0. SAIR DO PROGRAMA"));
                if (escolha.equals("n")){
                    i = 1;
                    escolha04757 = 10;
                }
                else if (escolha.equals("0") || escolha.equals("1") || escolha.equals("2") || escolha.equals("3")){
                    escolha04757 = Integer.parseInt(escolha);
                    i = 1;
                }
                else{
                    i = 0;
                }
        }while(i==0);
        if (escolha04757 == 0){
            System.exit(0);
        }
        else if (escolha04757 == 1){
            volts = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Volts:"));
            amps = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Amps:"));
            watts = volts * amps;
            txt_ohms.setText("");
            txt_watts.setText(df.format(watts)+"");
            txt_amps.setText(df.format(amps)+"");
            txt_volts.setText(df.format(volts)+"");
        }
        else if (escolha04757 == 2){
            ohms = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Ohms:"));
            amps = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Amps:"));
            watts = ohms * (amps*amps);
            txt_ohms.setText(df.format(ohms)+"");
            txt_watts.setText(df.format(watts)+"");
            txt_amps.setText(df.format(amps)+"");
            txt_volts.setText("");
        }
        else if (escolha04757 == 3){
            volts = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Volts:"));
            ohms = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Ohms:"));
            watts = (volts * volts) / ohms;
            txt_ohms.setText(""+df.format(ohms));
            txt_watts.setText(df.format(watts)+"");
            txt_amps.setText("");
            txt_volts.setText(df.format(volts)+"");
        }
        else{
            txt_watts.setText("");
            txt_ohms.setText("");
            txt_amps.setText("");
            txt_volts.setText("");
        }
    }//GEN-LAST:event_btn_wattsActionPerformed

    private void btn_sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_sairActionPerformed
        int selectedOption = JOptionPane.showConfirmDialog(null, "Deseja Sair?", "Sistema informa:", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION){
            System.exit(0);
        }
        else{
            
        }
    }//GEN-LAST:event_btn_sairActionPerformed

    private void btn_voltsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_voltsActionPerformed
        do{
        escolha = JOptionPane.showInputDialog("Escolha a maneira de encontrar o Volts digitando o número correspondente:"
                + "\n 1. Ohms & Amps"
                + "\n 2. Amps & Watts"
                + "\n 3. Ohms & Watts"
                + "\n n. SAIR"
                + "\n 0. SAIR DO PROGRAMA");
                if (escolha.equals("n")){
                    i = 1;
                    escolha04757 = 10;
                }
                else if (escolha.equals("0") || escolha.equals("1") || escolha.equals("2") || escolha.equals("3")){
                    escolha04757 = Integer.parseInt(escolha);
                    i = 1;
                }
                else{
                    i = 0;
                }
        }while(i==0);
        if (escolha04757 == 0){
            System.exit(0);
        }
        else if (escolha04757 == 1){
            ohms = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Ohms:"));
            amps = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Amps:"));
            volts = ohms * amps;
            txt_ohms.setText(df.format(ohms)+"");
            txt_watts.setText("");
            txt_amps.setText(df.format(amps)+"");
            txt_volts.setText(df.format(volts)+"");
        }
        else if (escolha04757 == 2){
            watts = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Watts:"));
            amps = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Amps:"));
            volts = watts / amps;
            txt_ohms.setText("");
            txt_watts.setText(df.format(watts)+"");
            txt_amps.setText(df.format(amps)+"");
            txt_volts.setText(df.format(volts)+"");
        }
        else if (escolha04757 == 3){
            ohms = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Ohms:"));
            watts = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Watts:"));
            volts = Math.sqrt(watts * ohms);
            txt_ohms.setText(""+df.format(ohms));
            txt_watts.setText(df.format(watts)+"");
            txt_amps.setText("");
            txt_volts.setText(df.format(volts)+"");
        }
        else{
            txt_watts.setText("");
            txt_ohms.setText("");
            txt_amps.setText("");
            txt_volts.setText("");
        }
    }//GEN-LAST:event_btn_voltsActionPerformed

    private void btn_ampsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ampsActionPerformed
        do{
        escolha = JOptionPane.showInputDialog("Escolha a maneira de encontrar o Amps digitando o número correspondente:"
                + "\n 1. Ohms & Watts"
                + "\n 2. Volts & Watts"
                + "\n 3. Ohms & Volts"
                + "\n n. SAIR"
                + "\n 0. SAIR DO PROGRAMA");
            if (escolha.equals("n")){
                i = 1;
                escolha04757 = 10;                
            }
            else if(escolha.equals("0") || escolha.equals("1") || escolha.equals("2") || escolha.equals("3")){
                    escolha04757 = Integer.parseInt(escolha);
                    i = 1;
                }
                else{
                    i = 0;
                }
        }while(i==0);
        if (escolha04757 == 0){
            System.exit(0);
        }
        else if (escolha04757 == 1){
            ohms = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Ohms:"));
            watts = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Watts:"));
            amps = Math.sqrt(watts / ohms);
            txt_ohms.setText(df.format(ohms)+"");
            txt_watts.setText(df.format(watts)+"");
            txt_amps.setText(df.format(amps)+"");
            txt_volts.setText("");
        }
        else if (escolha04757 == 2){
            volts = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Volts:"));
            watts = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Watts:"));
            amps = watts / volts;
            txt_ohms.setText("");
            txt_watts.setText(df.format(watts)+"");
            txt_amps.setText(df.format(amps)+"");
            txt_volts.setText(df.format(volts)+"");
        }
        else if (escolha04757 == 3){            
            ohms = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Ohms:"));
            volts = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Volts:"));
            amps = volts / ohms;
            txt_ohms.setText(""+df.format(ohms));
            txt_watts.setText("");
            txt_amps.setText(df.format(amps)+"");
            txt_volts.setText(df.format(volts)+"");
        }
        else{
            txt_watts.setText("");
            txt_ohms.setText("");
            txt_amps.setText("");
            txt_volts.setText("");
        }
    }//GEN-LAST:event_btn_ampsActionPerformed

    private void btn_ohmsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ohmsActionPerformed
        do{
        escolha = JOptionPane.showInputDialog("Escolha a maneira de encontrar o Ohms digitando o número correspondente:"
                + "\n 1. Amps & Watts"
                + "\n 2. Volts & Watts"
                + "\n 3. Amps & Volts"
                + "\n n. SAIR"
                + "\n 0. SAIR DO PROGRAMA");
            if (escolha.equals("n")){
                i = 1;
                escolha04757 = 10;
            }
            else if (escolha.equals("0") || escolha.equals("1") || escolha.equals("2") || escolha.equals("3")){
                escolha04757 = Integer.parseInt(escolha);
                i = 1;
            }
            else{
                i = 0;
            }
        }while(i==0);
        if (escolha04757 == 0){
            System.exit(0);
        }
        else if (escolha04757 == 1){
            amps = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Amps:"));
            watts = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Watts:"));
            ohms = watts / (amps * amps);
            txt_ohms.setText(df.format(ohms)+"");
            txt_watts.setText(df.format(watts)+"");
            txt_amps.setText(df.format(amps)+"");
            txt_volts.setText("");
        }
        else if (escolha04757 == 2){
            volts = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Volts:"));
            watts = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Watts:"));
            ohms = (volts * volts) / watts;
            txt_ohms.setText(df.format(ohms)+"");
            txt_watts.setText(df.format(watts)+"");
            txt_amps.setText("");
            txt_volts.setText(df.format(volts)+"");
        }
        else if (escolha04757 == 3){            
            amps = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Amps:"));
            volts = Double.parseDouble(JOptionPane.showInputDialog("Insira o valor em Volts:"));
            ohms = volts / amps;
            txt_ohms.setText(""+df.format(ohms));
            txt_watts.setText("");
            txt_amps.setText(df.format(amps)+"");
            txt_volts.setText(df.format(volts)+"");
        }
        else{
            txt_watts.setText("");
            txt_ohms.setText("");
            txt_amps.setText("");
            txt_volts.setText("");            
        }
    }//GEN-LAST:event_btn_ohmsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExercicioRM04757.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExercicioRM04757.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExercicioRM04757.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExercicioRM04757.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExercicioRM04757().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_amps;
    private javax.swing.JButton btn_enunciado;
    private javax.swing.JButton btn_ohms;
    private javax.swing.JButton btn_sair;
    private javax.swing.JButton btn_volts;
    private javax.swing.JButton btn_watts;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lbl_amps;
    private javax.swing.JLabel lbl_ohms;
    private javax.swing.JLabel lbl_volts;
    private javax.swing.JLabel lbl_watts;
    private javax.swing.JTextField txt_amps;
    private javax.swing.JTextField txt_ohms;
    private javax.swing.JTextField txt_volts;
    private javax.swing.JTextField txt_watts;
    // End of variables declaration//GEN-END:variables
}
